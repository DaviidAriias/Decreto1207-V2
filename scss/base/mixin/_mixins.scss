
//------------------------------------------- Mixins

//============ Prefix ============
@mixin prefix($declarations, $prefixes: ()) {
    @each $property, $value in $declarations {
      @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $property}: $value;
      }
  
      // Output standard non-prefixed declaration
      #{$property}: $value;
    }
}

//How to use prefix
/*
@include prefix((
    display: flex,
    align-items: center,
    justify-content: flex-start
), webkit moz ms o);
*/

//============ End Prefix ============



//============ Filter overlay ============
@mixin capa_negra($r,$g,$b,$a){
    background-color: rgba($r,$g,$b,$a);
    background-blend-mode: overlay;
}

//How to use Filtro Background's
/*
  Ejemplo pendiente
*/

//============ End Filter overlay ============



//============ Keyframes ============
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
      @content;
  }
  @-moz-keyframes #{$name} {
      @content;
  }
  @-ms-keyframes #{$name} {
      @content;
  }
  @-o-keyframes #{$name} {
      @content;
  }
  @keyframes #{$name} {
      @content;
  }
}

//How to use Filtro Background's
/*
  @include keyframes([animation_name]){
    0%{
      properties
    }
    100%{
      properties
    }
  }

  Se pueden adjuntar mÃ¡s porcentajes si se requiere, en este caso solo hay dos, inicio y fin.
*/

//============ End Keyframes ============



//============ Text Shorten ============
@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


//How to use Text Shorten
/*
  p{
      @include text-shorten();
  }
*/

//============ End Text Shorten ============



//============ Darken ============
@function darken($color, $percentage) {
  @return mix(black, $color, $percentage);
}

//Hoe to use darken
/*
  color: darken([color],[porcentaje])
  p{
      color: darken($text-color, 50%);
  }
*/

//============ End darken ============



//============ Lighten ============
@function lighten($color, $percentage) {
  @return mix(white, $color, $percentage);
}

//How to use lighten
/*
  color: lighten([color],[porcentaje])
  p{
      color: lighten($text-color, 50%);
  }
*/

//============ End Lighten ============



//============ Defaut Fonts Properties ============

//How to use defaultFont
/*
  p{  
      @include defaultFont([Se pueden incluir variables o dejar vacio]);

      @include defaultFont(1,$fz: 16px, $fw: bold, $lh: 18px, $ta: center);

      $fz: -> [Property] -> font-size
      $fw: -> [Property] -> font-weight
      $lh: -> [Property] -> line-height
      $ta: -> [Property] -> text-align
      $c:  -> [Property] -> color
  }
*/

/* @mixin defaultFont(1,$ff: $roboto, $fz: $font-p, $fw: normal, $lh: 'LhInitial', $ta: left, $c: $text-color){
  $FzContent: inspect($fz);
    @if ends-with($FzContent, 'px') {
      @if $lh == 'LhInitial'{
        $lh: $fz + 2;
      }
    } @else{
      @if $lh == "LhInitial"{
        $lh: initial;
      }
    }
  
  //Normal properties
  font-family: $ff;
  font-size: $fz;
  line-height: $lh;
  font-weight: $fw;
  text-align: $ta;
  color: $c;

}*/

@mixin defaultFont($d, $ff: 'init', $fz: 'init', $fw: 'init', $lh: 'init', $ta: 'init', $c: 'init', $fs: 'init'){

  @if $d == 1 {
    @include allProperty($ff, $fz, $fw, $lh, $ta, $c, $fs);
  } @else {
    @include partiallyProperty($ff, $fz, $fw, $lh, $ta, $c, $fs);
  }
}

// Mixin para agregar todas las propiedades de las fuentes
@mixin allProperty($ff, $fz, $fw, $lh, $ta, $c, $fs){
  @if $ff == 'init' {$ff: $roboto}
  @if $fz == 'init' {$fz: $font-p}
  @if $fw == 'init' {$fw: regular}
  @if $ta == 'init' {$ta: left}
  @if $c == 'init' {$c: $text-color}
  @if $fs == 'init' {$fs: normal}

  $FzContent: inspect($fz);
  @if ends-with($FzContent, 'px') {
    @if $lh == 'init'{
      $lh: $fz + 2;
    }
  } @else{
    @if $lh == "init"{
      $lh: initial;
    }
  }

  @if map-has-key($mapFW, $fw) {
    $fw: map-get($mapFW, $fw)
  }
  
  //Normal properties
  font-family: $ff;
  font-size: $fz;
  line-height: $lh;
  font-weight: $fw;
  text-align: $ta;
  font-style: $fs;
  color: $c;

}

// Mixin para agregar propiedades ralativas a las fuentes
@mixin partiallyProperty($ff, $fz, $fw, $lh, $ta, $c, $fs){
  @if map-has-key($mapFW, $fw) {
    $fw: map-get($mapFW, $fw)
  }
  
  @if $ff != 'init' {font-family: $ff}
  @if $fz != 'init' {font-size: $fz}
  @if $lh != 'init' {line-height: $lh}
  @if $fw != 'init' {font-weight: $fw}
  @if $ta != 'init' {text-align: $ta}
  @if $c != 'init' {color: $c}
  @if $fs != 'init' {font-style: $fs}

}


//Funcion parar encontrar caracteres de un string
@function ends-with($string, $find) {
  @if (str-index($string, $find) == (str-length($string) - str-length($find) + 1)) {
    @return true;
  } @else {
    @return false;
  }
}


//============ End Defaut Fonts Properties ============